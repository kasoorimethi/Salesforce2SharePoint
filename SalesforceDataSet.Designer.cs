//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.42000
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Salesforce2SharePoint {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SalesforceDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SalesforceDataSet : global::System.Data.DataSet {
        
        private EventDataTable tableEvent;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public SalesforceDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected SalesforceDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Event"] != null)) {
                    base.Tables.Add(new EventDataTable(ds.Tables["Event"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EventDataTable Event {
            get {
                return this.tableEvent;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            SalesforceDataSet cln = ((SalesforceDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Event"] != null)) {
                    base.Tables.Add(new EventDataTable(ds.Tables["Event"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableEvent = ((EventDataTable)(base.Tables["Event"]));
            if ((initTable == true)) {
                if ((this.tableEvent != null)) {
                    this.tableEvent.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "SalesforceDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SalesforceDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEvent = new EventDataTable();
            base.Tables.Add(this.tableEvent);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeEvent() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SalesforceDataSet ds = new SalesforceDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void EventRowChangeEventHandler(object sender, EventRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EventDataTable : global::System.Data.TypedTableBase<EventRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnWhoId;
            
            private global::System.Data.DataColumn columnWhatId;
            
            private global::System.Data.DataColumn columnSubject;
            
            private global::System.Data.DataColumn columnLocation;
            
            private global::System.Data.DataColumn columnIsAllDayEvent;
            
            private global::System.Data.DataColumn columnActivityDateTime;
            
            private global::System.Data.DataColumn columnActivityDate;
            
            private global::System.Data.DataColumn columnDurationInMinutes;
            
            private global::System.Data.DataColumn columnStartDateTime;
            
            private global::System.Data.DataColumn columnEndDateTime;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnAccountId;
            
            private global::System.Data.DataColumn columnOwnerId;
            
            private global::System.Data.DataColumn columnIsPrivate;
            
            private global::System.Data.DataColumn columnShowAs;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnIsChild;
            
            private global::System.Data.DataColumn columnIsGroupEvent;
            
            private global::System.Data.DataColumn columnGroupEventType;
            
            private global::System.Data.DataColumn columnCreatedDate;
            
            private global::System.Data.DataColumn columnCreatedById;
            
            private global::System.Data.DataColumn columnLastModifiedDate;
            
            private global::System.Data.DataColumn columnLastModifiedById;
            
            private global::System.Data.DataColumn columnSystemModstamp;
            
            private global::System.Data.DataColumn columnIsArchived;
            
            private global::System.Data.DataColumn columnRecurrenceActivityId;
            
            private global::System.Data.DataColumn columnIsRecurrence;
            
            private global::System.Data.DataColumn columnRecurrenceStartDateTime;
            
            private global::System.Data.DataColumn columnRecurrenceEndDateOnly;
            
            private global::System.Data.DataColumn columnRecurrenceTimeZoneSidKey;
            
            private global::System.Data.DataColumn columnRecurrenceType;
            
            private global::System.Data.DataColumn columnRecurrenceInterval;
            
            private global::System.Data.DataColumn columnRecurrenceDayOfWeekMask;
            
            private global::System.Data.DataColumn columnRecurrenceDayOfMonth;
            
            private global::System.Data.DataColumn columnRecurrenceInstance;
            
            private global::System.Data.DataColumn columnRecurrenceMonthOfYear;
            
            private global::System.Data.DataColumn columnReminderDateTime;
            
            private global::System.Data.DataColumn columnIsReminderSet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventDataTable() {
                this.TableName = "Event";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EventDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected EventDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn WhoIdColumn {
                get {
                    return this.columnWhoId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn WhatIdColumn {
                get {
                    return this.columnWhatId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SubjectColumn {
                get {
                    return this.columnSubject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsAllDayEventColumn {
                get {
                    return this.columnIsAllDayEvent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ActivityDateTimeColumn {
                get {
                    return this.columnActivityDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ActivityDateColumn {
                get {
                    return this.columnActivityDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DurationInMinutesColumn {
                get {
                    return this.columnDurationInMinutes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn StartDateTimeColumn {
                get {
                    return this.columnStartDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EndDateTimeColumn {
                get {
                    return this.columnEndDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AccountIdColumn {
                get {
                    return this.columnAccountId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn OwnerIdColumn {
                get {
                    return this.columnOwnerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsPrivateColumn {
                get {
                    return this.columnIsPrivate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ShowAsColumn {
                get {
                    return this.columnShowAs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsChildColumn {
                get {
                    return this.columnIsChild;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsGroupEventColumn {
                get {
                    return this.columnIsGroupEvent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GroupEventTypeColumn {
                get {
                    return this.columnGroupEventType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CreatedDateColumn {
                get {
                    return this.columnCreatedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CreatedByIdColumn {
                get {
                    return this.columnCreatedById;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LastModifiedDateColumn {
                get {
                    return this.columnLastModifiedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LastModifiedByIdColumn {
                get {
                    return this.columnLastModifiedById;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SystemModstampColumn {
                get {
                    return this.columnSystemModstamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsArchivedColumn {
                get {
                    return this.columnIsArchived;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RecurrenceActivityIdColumn {
                get {
                    return this.columnRecurrenceActivityId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsRecurrenceColumn {
                get {
                    return this.columnIsRecurrence;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RecurrenceStartDateTimeColumn {
                get {
                    return this.columnRecurrenceStartDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RecurrenceEndDateOnlyColumn {
                get {
                    return this.columnRecurrenceEndDateOnly;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RecurrenceTimeZoneSidKeyColumn {
                get {
                    return this.columnRecurrenceTimeZoneSidKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RecurrenceTypeColumn {
                get {
                    return this.columnRecurrenceType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RecurrenceIntervalColumn {
                get {
                    return this.columnRecurrenceInterval;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RecurrenceDayOfWeekMaskColumn {
                get {
                    return this.columnRecurrenceDayOfWeekMask;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RecurrenceDayOfMonthColumn {
                get {
                    return this.columnRecurrenceDayOfMonth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RecurrenceInstanceColumn {
                get {
                    return this.columnRecurrenceInstance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RecurrenceMonthOfYearColumn {
                get {
                    return this.columnRecurrenceMonthOfYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ReminderDateTimeColumn {
                get {
                    return this.columnReminderDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsReminderSetColumn {
                get {
                    return this.columnIsReminderSet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventRow this[int index] {
                get {
                    return ((EventRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EventRowChangeEventHandler EventRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EventRowChangeEventHandler EventRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EventRowChangeEventHandler EventRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event EventRowChangeEventHandler EventRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddEventRow(EventRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventRow AddEventRow(
                        string Id, 
                        string WhoId, 
                        string WhatId, 
                        string Subject, 
                        string Location, 
                        bool IsAllDayEvent, 
                        System.DateTime ActivityDateTime, 
                        System.DateTime ActivityDate, 
                        int DurationInMinutes, 
                        System.DateTime StartDateTime, 
                        System.DateTime EndDateTime, 
                        string Description, 
                        string AccountId, 
                        string OwnerId, 
                        bool IsPrivate, 
                        string ShowAs, 
                        bool IsDeleted, 
                        bool IsChild, 
                        bool IsGroupEvent, 
                        string GroupEventType, 
                        System.DateTime CreatedDate, 
                        string CreatedById, 
                        System.DateTime LastModifiedDate, 
                        string LastModifiedById, 
                        System.DateTime SystemModstamp, 
                        bool IsArchived, 
                        string RecurrenceActivityId, 
                        bool IsRecurrence, 
                        System.DateTime RecurrenceStartDateTime, 
                        System.DateTime RecurrenceEndDateOnly, 
                        string RecurrenceTimeZoneSidKey, 
                        string RecurrenceType, 
                        int RecurrenceInterval, 
                        int RecurrenceDayOfWeekMask, 
                        int RecurrenceDayOfMonth, 
                        string RecurrenceInstance, 
                        string RecurrenceMonthOfYear, 
                        System.DateTime ReminderDateTime, 
                        bool IsReminderSet) {
                EventRow rowEventRow = ((EventRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        WhoId,
                        WhatId,
                        Subject,
                        Location,
                        IsAllDayEvent,
                        ActivityDateTime,
                        ActivityDate,
                        DurationInMinutes,
                        StartDateTime,
                        EndDateTime,
                        Description,
                        AccountId,
                        OwnerId,
                        IsPrivate,
                        ShowAs,
                        IsDeleted,
                        IsChild,
                        IsGroupEvent,
                        GroupEventType,
                        CreatedDate,
                        CreatedById,
                        LastModifiedDate,
                        LastModifiedById,
                        SystemModstamp,
                        IsArchived,
                        RecurrenceActivityId,
                        IsRecurrence,
                        RecurrenceStartDateTime,
                        RecurrenceEndDateOnly,
                        RecurrenceTimeZoneSidKey,
                        RecurrenceType,
                        RecurrenceInterval,
                        RecurrenceDayOfWeekMask,
                        RecurrenceDayOfMonth,
                        RecurrenceInstance,
                        RecurrenceMonthOfYear,
                        ReminderDateTime,
                        IsReminderSet};
                rowEventRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEventRow);
                return rowEventRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventRow FindById(string Id) {
                return ((EventRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                EventDataTable cln = ((EventDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EventDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnWhoId = base.Columns["WhoId"];
                this.columnWhatId = base.Columns["WhatId"];
                this.columnSubject = base.Columns["Subject"];
                this.columnLocation = base.Columns["Location"];
                this.columnIsAllDayEvent = base.Columns["IsAllDayEvent"];
                this.columnActivityDateTime = base.Columns["ActivityDateTime"];
                this.columnActivityDate = base.Columns["ActivityDate"];
                this.columnDurationInMinutes = base.Columns["DurationInMinutes"];
                this.columnStartDateTime = base.Columns["StartDateTime"];
                this.columnEndDateTime = base.Columns["EndDateTime"];
                this.columnDescription = base.Columns["Description"];
                this.columnAccountId = base.Columns["AccountId"];
                this.columnOwnerId = base.Columns["OwnerId"];
                this.columnIsPrivate = base.Columns["IsPrivate"];
                this.columnShowAs = base.Columns["ShowAs"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnIsChild = base.Columns["IsChild"];
                this.columnIsGroupEvent = base.Columns["IsGroupEvent"];
                this.columnGroupEventType = base.Columns["GroupEventType"];
                this.columnCreatedDate = base.Columns["CreatedDate"];
                this.columnCreatedById = base.Columns["CreatedById"];
                this.columnLastModifiedDate = base.Columns["LastModifiedDate"];
                this.columnLastModifiedById = base.Columns["LastModifiedById"];
                this.columnSystemModstamp = base.Columns["SystemModstamp"];
                this.columnIsArchived = base.Columns["IsArchived"];
                this.columnRecurrenceActivityId = base.Columns["RecurrenceActivityId"];
                this.columnIsRecurrence = base.Columns["IsRecurrence"];
                this.columnRecurrenceStartDateTime = base.Columns["RecurrenceStartDateTime"];
                this.columnRecurrenceEndDateOnly = base.Columns["RecurrenceEndDateOnly"];
                this.columnRecurrenceTimeZoneSidKey = base.Columns["RecurrenceTimeZoneSidKey"];
                this.columnRecurrenceType = base.Columns["RecurrenceType"];
                this.columnRecurrenceInterval = base.Columns["RecurrenceInterval"];
                this.columnRecurrenceDayOfWeekMask = base.Columns["RecurrenceDayOfWeekMask"];
                this.columnRecurrenceDayOfMonth = base.Columns["RecurrenceDayOfMonth"];
                this.columnRecurrenceInstance = base.Columns["RecurrenceInstance"];
                this.columnRecurrenceMonthOfYear = base.Columns["RecurrenceMonthOfYear"];
                this.columnReminderDateTime = base.Columns["ReminderDateTime"];
                this.columnIsReminderSet = base.Columns["IsReminderSet"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnWhoId = new global::System.Data.DataColumn("WhoId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWhoId);
                this.columnWhatId = new global::System.Data.DataColumn("WhatId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWhatId);
                this.columnSubject = new global::System.Data.DataColumn("Subject", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubject);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
                this.columnIsAllDayEvent = new global::System.Data.DataColumn("IsAllDayEvent", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsAllDayEvent);
                this.columnActivityDateTime = new global::System.Data.DataColumn("ActivityDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActivityDateTime);
                this.columnActivityDate = new global::System.Data.DataColumn("ActivityDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActivityDate);
                this.columnDurationInMinutes = new global::System.Data.DataColumn("DurationInMinutes", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDurationInMinutes);
                this.columnStartDateTime = new global::System.Data.DataColumn("StartDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDateTime);
                this.columnEndDateTime = new global::System.Data.DataColumn("EndDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDateTime);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnAccountId = new global::System.Data.DataColumn("AccountId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountId);
                this.columnOwnerId = new global::System.Data.DataColumn("OwnerId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerId);
                this.columnIsPrivate = new global::System.Data.DataColumn("IsPrivate", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPrivate);
                this.columnShowAs = new global::System.Data.DataColumn("ShowAs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShowAs);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnIsChild = new global::System.Data.DataColumn("IsChild", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsChild);
                this.columnIsGroupEvent = new global::System.Data.DataColumn("IsGroupEvent", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsGroupEvent);
                this.columnGroupEventType = new global::System.Data.DataColumn("GroupEventType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupEventType);
                this.columnCreatedDate = new global::System.Data.DataColumn("CreatedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDate);
                this.columnCreatedById = new global::System.Data.DataColumn("CreatedById", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedById);
                this.columnLastModifiedDate = new global::System.Data.DataColumn("LastModifiedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastModifiedDate);
                this.columnLastModifiedById = new global::System.Data.DataColumn("LastModifiedById", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastModifiedById);
                this.columnSystemModstamp = new global::System.Data.DataColumn("SystemModstamp", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSystemModstamp);
                this.columnIsArchived = new global::System.Data.DataColumn("IsArchived", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsArchived);
                this.columnRecurrenceActivityId = new global::System.Data.DataColumn("RecurrenceActivityId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecurrenceActivityId);
                this.columnIsRecurrence = new global::System.Data.DataColumn("IsRecurrence", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRecurrence);
                this.columnRecurrenceStartDateTime = new global::System.Data.DataColumn("RecurrenceStartDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecurrenceStartDateTime);
                this.columnRecurrenceEndDateOnly = new global::System.Data.DataColumn("RecurrenceEndDateOnly", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecurrenceEndDateOnly);
                this.columnRecurrenceTimeZoneSidKey = new global::System.Data.DataColumn("RecurrenceTimeZoneSidKey", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecurrenceTimeZoneSidKey);
                this.columnRecurrenceType = new global::System.Data.DataColumn("RecurrenceType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecurrenceType);
                this.columnRecurrenceInterval = new global::System.Data.DataColumn("RecurrenceInterval", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecurrenceInterval);
                this.columnRecurrenceDayOfWeekMask = new global::System.Data.DataColumn("RecurrenceDayOfWeekMask", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecurrenceDayOfWeekMask);
                this.columnRecurrenceDayOfMonth = new global::System.Data.DataColumn("RecurrenceDayOfMonth", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecurrenceDayOfMonth);
                this.columnRecurrenceInstance = new global::System.Data.DataColumn("RecurrenceInstance", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecurrenceInstance);
                this.columnRecurrenceMonthOfYear = new global::System.Data.DataColumn("RecurrenceMonthOfYear", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecurrenceMonthOfYear);
                this.columnReminderDateTime = new global::System.Data.DataColumn("ReminderDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReminderDateTime);
                this.columnIsReminderSet = new global::System.Data.DataColumn("IsReminderSet", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsReminderSet);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnId.MaxLength = 18;
                this.columnWhoId.MaxLength = 18;
                this.columnWhatId.MaxLength = 18;
                this.columnSubject.MaxLength = 255;
                this.columnLocation.MaxLength = 255;
                this.columnIsAllDayEvent.AllowDBNull = false;
                this.columnDescription.MaxLength = 32000;
                this.columnAccountId.ReadOnly = true;
                this.columnAccountId.MaxLength = 18;
                this.columnOwnerId.AllowDBNull = false;
                this.columnOwnerId.MaxLength = 18;
                this.columnIsPrivate.AllowDBNull = false;
                this.columnShowAs.MaxLength = 40;
                this.columnIsDeleted.ReadOnly = true;
                this.columnIsChild.ReadOnly = true;
                this.columnIsGroupEvent.ReadOnly = true;
                this.columnGroupEventType.ReadOnly = true;
                this.columnGroupEventType.MaxLength = 40;
                this.columnCreatedDate.ReadOnly = true;
                this.columnCreatedById.ReadOnly = true;
                this.columnCreatedById.MaxLength = 18;
                this.columnLastModifiedDate.ReadOnly = true;
                this.columnLastModifiedById.ReadOnly = true;
                this.columnLastModifiedById.MaxLength = 18;
                this.columnSystemModstamp.ReadOnly = true;
                this.columnIsArchived.ReadOnly = true;
                this.columnRecurrenceActivityId.ReadOnly = true;
                this.columnRecurrenceActivityId.MaxLength = 18;
                this.columnIsRecurrence.AllowDBNull = false;
                this.columnRecurrenceTimeZoneSidKey.MaxLength = 40;
                this.columnRecurrenceType.MaxLength = 40;
                this.columnRecurrenceInstance.MaxLength = 40;
                this.columnRecurrenceMonthOfYear.MaxLength = 40;
                this.columnIsReminderSet.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventRow NewEventRow() {
                return ((EventRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EventRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(EventRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EventRowChanged != null)) {
                    this.EventRowChanged(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EventRowChanging != null)) {
                    this.EventRowChanging(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EventRowDeleted != null)) {
                    this.EventRowDeleted(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EventRowDeleting != null)) {
                    this.EventRowDeleting(this, new EventRowChangeEvent(((EventRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveEventRow(EventRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SalesforceDataSet ds = new SalesforceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EventDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class EventRow : global::System.Data.DataRow {
            
            private EventDataTable tableEvent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal EventRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEvent = ((EventDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Id {
                get {
                    return ((string)(this[this.tableEvent.IdColumn]));
                }
                set {
                    this[this.tableEvent.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string WhoId {
                get {
                    try {
                        return ((string)(this[this.tableEvent.WhoIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'WhoId\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.WhoIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string WhatId {
                get {
                    try {
                        return ((string)(this[this.tableEvent.WhatIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'WhatId\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.WhatIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Subject {
                get {
                    try {
                        return ((string)(this[this.tableEvent.SubjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'Subject\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.SubjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableEvent.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'Location\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAllDayEvent {
                get {
                    return ((bool)(this[this.tableEvent.IsAllDayEventColumn]));
                }
                set {
                    this[this.tableEvent.IsAllDayEventColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime ActivityDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEvent.ActivityDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'ActivityDateTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.ActivityDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime ActivityDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEvent.ActivityDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'ActivityDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.ActivityDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DurationInMinutes {
                get {
                    try {
                        return ((int)(this[this.tableEvent.DurationInMinutesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'DurationInMinutes\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.DurationInMinutesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime StartDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEvent.StartDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'StartDateTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.StartDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime EndDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEvent.EndDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'EndDateTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.EndDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableEvent.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'Description\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string AccountId {
                get {
                    try {
                        return ((string)(this[this.tableEvent.AccountIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'AccountId\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.AccountIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string OwnerId {
                get {
                    return ((string)(this[this.tableEvent.OwnerIdColumn]));
                }
                set {
                    this[this.tableEvent.OwnerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPrivate {
                get {
                    return ((bool)(this[this.tableEvent.IsPrivateColumn]));
                }
                set {
                    this[this.tableEvent.IsPrivateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ShowAs {
                get {
                    try {
                        return ((string)(this[this.tableEvent.ShowAsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'ShowAs\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.ShowAsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tableEvent.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'IsDeleted\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsChild {
                get {
                    try {
                        return ((bool)(this[this.tableEvent.IsChildColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'IsChild\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.IsChildColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGroupEvent {
                get {
                    try {
                        return ((bool)(this[this.tableEvent.IsGroupEventColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'IsGroupEvent\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.IsGroupEventColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string GroupEventType {
                get {
                    try {
                        return ((string)(this[this.tableEvent.GroupEventTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'GroupEventType\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.GroupEventTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime CreatedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEvent.CreatedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'CreatedDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.CreatedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CreatedById {
                get {
                    try {
                        return ((string)(this[this.tableEvent.CreatedByIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'CreatedById\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.CreatedByIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime LastModifiedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEvent.LastModifiedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'LastModifiedDate\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.LastModifiedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LastModifiedById {
                get {
                    try {
                        return ((string)(this[this.tableEvent.LastModifiedByIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'LastModifiedById\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.LastModifiedByIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime SystemModstamp {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEvent.SystemModstampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'SystemModstamp\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.SystemModstampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsArchived {
                get {
                    try {
                        return ((bool)(this[this.tableEvent.IsArchivedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'IsArchived\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.IsArchivedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RecurrenceActivityId {
                get {
                    try {
                        return ((string)(this[this.tableEvent.RecurrenceActivityIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'RecurrenceActivityId\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.RecurrenceActivityIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRecurrence {
                get {
                    return ((bool)(this[this.tableEvent.IsRecurrenceColumn]));
                }
                set {
                    this[this.tableEvent.IsRecurrenceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime RecurrenceStartDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEvent.RecurrenceStartDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'RecurrenceStartDateTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.RecurrenceStartDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime RecurrenceEndDateOnly {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEvent.RecurrenceEndDateOnlyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'RecurrenceEndDateOnly\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.RecurrenceEndDateOnlyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RecurrenceTimeZoneSidKey {
                get {
                    try {
                        return ((string)(this[this.tableEvent.RecurrenceTimeZoneSidKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'RecurrenceTimeZoneSidKey\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.RecurrenceTimeZoneSidKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RecurrenceType {
                get {
                    try {
                        return ((string)(this[this.tableEvent.RecurrenceTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'RecurrenceType\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.RecurrenceTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RecurrenceInterval {
                get {
                    try {
                        return ((int)(this[this.tableEvent.RecurrenceIntervalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'RecurrenceInterval\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.RecurrenceIntervalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RecurrenceDayOfWeekMask {
                get {
                    try {
                        return ((int)(this[this.tableEvent.RecurrenceDayOfWeekMaskColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'RecurrenceDayOfWeekMask\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.RecurrenceDayOfWeekMaskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RecurrenceDayOfMonth {
                get {
                    try {
                        return ((int)(this[this.tableEvent.RecurrenceDayOfMonthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'RecurrenceDayOfMonth\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.RecurrenceDayOfMonthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RecurrenceInstance {
                get {
                    try {
                        return ((string)(this[this.tableEvent.RecurrenceInstanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'RecurrenceInstance\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.RecurrenceInstanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RecurrenceMonthOfYear {
                get {
                    try {
                        return ((string)(this[this.tableEvent.RecurrenceMonthOfYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'RecurrenceMonthOfYear\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.RecurrenceMonthOfYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime ReminderDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEvent.ReminderDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("テーブル \'Event\' にある列 \'ReminderDateTime\' の値は DBNull です。", e);
                    }
                }
                set {
                    this[this.tableEvent.ReminderDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsReminderSet {
                get {
                    return ((bool)(this[this.tableEvent.IsReminderSetColumn]));
                }
                set {
                    this[this.tableEvent.IsReminderSetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsWhoIdNull() {
                return this.IsNull(this.tableEvent.WhoIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetWhoIdNull() {
                this[this.tableEvent.WhoIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsWhatIdNull() {
                return this.IsNull(this.tableEvent.WhatIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetWhatIdNull() {
                this[this.tableEvent.WhatIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSubjectNull() {
                return this.IsNull(this.tableEvent.SubjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSubjectNull() {
                this[this.tableEvent.SubjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLocationNull() {
                return this.IsNull(this.tableEvent.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLocationNull() {
                this[this.tableEvent.LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsActivityDateTimeNull() {
                return this.IsNull(this.tableEvent.ActivityDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetActivityDateTimeNull() {
                this[this.tableEvent.ActivityDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsActivityDateNull() {
                return this.IsNull(this.tableEvent.ActivityDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetActivityDateNull() {
                this[this.tableEvent.ActivityDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDurationInMinutesNull() {
                return this.IsNull(this.tableEvent.DurationInMinutesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDurationInMinutesNull() {
                this[this.tableEvent.DurationInMinutesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsStartDateTimeNull() {
                return this.IsNull(this.tableEvent.StartDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetStartDateTimeNull() {
                this[this.tableEvent.StartDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEndDateTimeNull() {
                return this.IsNull(this.tableEvent.EndDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEndDateTimeNull() {
                this[this.tableEvent.EndDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableEvent.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDescriptionNull() {
                this[this.tableEvent.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAccountIdNull() {
                return this.IsNull(this.tableEvent.AccountIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAccountIdNull() {
                this[this.tableEvent.AccountIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsShowAsNull() {
                return this.IsNull(this.tableEvent.ShowAsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetShowAsNull() {
                this[this.tableEvent.ShowAsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tableEvent.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsDeletedNull() {
                this[this.tableEvent.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsChildNull() {
                return this.IsNull(this.tableEvent.IsChildColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsChildNull() {
                this[this.tableEvent.IsChildColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsGroupEventNull() {
                return this.IsNull(this.tableEvent.IsGroupEventColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsGroupEventNull() {
                this[this.tableEvent.IsGroupEventColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGroupEventTypeNull() {
                return this.IsNull(this.tableEvent.GroupEventTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGroupEventTypeNull() {
                this[this.tableEvent.GroupEventTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCreatedDateNull() {
                return this.IsNull(this.tableEvent.CreatedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCreatedDateNull() {
                this[this.tableEvent.CreatedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCreatedByIdNull() {
                return this.IsNull(this.tableEvent.CreatedByIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCreatedByIdNull() {
                this[this.tableEvent.CreatedByIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLastModifiedDateNull() {
                return this.IsNull(this.tableEvent.LastModifiedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLastModifiedDateNull() {
                this[this.tableEvent.LastModifiedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLastModifiedByIdNull() {
                return this.IsNull(this.tableEvent.LastModifiedByIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLastModifiedByIdNull() {
                this[this.tableEvent.LastModifiedByIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSystemModstampNull() {
                return this.IsNull(this.tableEvent.SystemModstampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSystemModstampNull() {
                this[this.tableEvent.SystemModstampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsArchivedNull() {
                return this.IsNull(this.tableEvent.IsArchivedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsArchivedNull() {
                this[this.tableEvent.IsArchivedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRecurrenceActivityIdNull() {
                return this.IsNull(this.tableEvent.RecurrenceActivityIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRecurrenceActivityIdNull() {
                this[this.tableEvent.RecurrenceActivityIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRecurrenceStartDateTimeNull() {
                return this.IsNull(this.tableEvent.RecurrenceStartDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRecurrenceStartDateTimeNull() {
                this[this.tableEvent.RecurrenceStartDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRecurrenceEndDateOnlyNull() {
                return this.IsNull(this.tableEvent.RecurrenceEndDateOnlyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRecurrenceEndDateOnlyNull() {
                this[this.tableEvent.RecurrenceEndDateOnlyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRecurrenceTimeZoneSidKeyNull() {
                return this.IsNull(this.tableEvent.RecurrenceTimeZoneSidKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRecurrenceTimeZoneSidKeyNull() {
                this[this.tableEvent.RecurrenceTimeZoneSidKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRecurrenceTypeNull() {
                return this.IsNull(this.tableEvent.RecurrenceTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRecurrenceTypeNull() {
                this[this.tableEvent.RecurrenceTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRecurrenceIntervalNull() {
                return this.IsNull(this.tableEvent.RecurrenceIntervalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRecurrenceIntervalNull() {
                this[this.tableEvent.RecurrenceIntervalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRecurrenceDayOfWeekMaskNull() {
                return this.IsNull(this.tableEvent.RecurrenceDayOfWeekMaskColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRecurrenceDayOfWeekMaskNull() {
                this[this.tableEvent.RecurrenceDayOfWeekMaskColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRecurrenceDayOfMonthNull() {
                return this.IsNull(this.tableEvent.RecurrenceDayOfMonthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRecurrenceDayOfMonthNull() {
                this[this.tableEvent.RecurrenceDayOfMonthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRecurrenceInstanceNull() {
                return this.IsNull(this.tableEvent.RecurrenceInstanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRecurrenceInstanceNull() {
                this[this.tableEvent.RecurrenceInstanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRecurrenceMonthOfYearNull() {
                return this.IsNull(this.tableEvent.RecurrenceMonthOfYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRecurrenceMonthOfYearNull() {
                this[this.tableEvent.RecurrenceMonthOfYearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsReminderDateTimeNull() {
                return this.IsNull(this.tableEvent.ReminderDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetReminderDateTimeNull() {
                this[this.tableEvent.ReminderDateTimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class EventRowChangeEvent : global::System.EventArgs {
            
            private EventRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventRowChangeEvent(EventRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public EventRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Salesforce2SharePoint.SalesforceDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EventTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.CData.Salesforce.SalesforceDataAdapter _adapter;
        
        private global::System.Data.CData.Salesforce.SalesforceConnection _connection;
        
        private global::System.Data.CData.Salesforce.SalesforceTransaction _transaction;
        
        private global::System.Data.CData.Salesforce.SalesforceCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public EventTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.CData.Salesforce.SalesforceDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.CData.Salesforce.SalesforceConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.CData.Salesforce.SalesforceCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.CData.Salesforce.SalesforceTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.CData.Salesforce.SalesforceCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.CData.Salesforce.SalesforceDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Event";
            tableMapping.ColumnMappings.Add("Id", "Id");
            tableMapping.ColumnMappings.Add("WhoId", "WhoId");
            tableMapping.ColumnMappings.Add("WhatId", "WhatId");
            tableMapping.ColumnMappings.Add("Subject", "Subject");
            tableMapping.ColumnMappings.Add("Location", "Location");
            tableMapping.ColumnMappings.Add("IsAllDayEvent", "IsAllDayEvent");
            tableMapping.ColumnMappings.Add("ActivityDateTime", "ActivityDateTime");
            tableMapping.ColumnMappings.Add("ActivityDate", "ActivityDate");
            tableMapping.ColumnMappings.Add("DurationInMinutes", "DurationInMinutes");
            tableMapping.ColumnMappings.Add("StartDateTime", "StartDateTime");
            tableMapping.ColumnMappings.Add("EndDateTime", "EndDateTime");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("AccountId", "AccountId");
            tableMapping.ColumnMappings.Add("OwnerId", "OwnerId");
            tableMapping.ColumnMappings.Add("IsPrivate", "IsPrivate");
            tableMapping.ColumnMappings.Add("ShowAs", "ShowAs");
            tableMapping.ColumnMappings.Add("IsDeleted", "IsDeleted");
            tableMapping.ColumnMappings.Add("IsChild", "IsChild");
            tableMapping.ColumnMappings.Add("IsGroupEvent", "IsGroupEvent");
            tableMapping.ColumnMappings.Add("GroupEventType", "GroupEventType");
            tableMapping.ColumnMappings.Add("CreatedDate", "CreatedDate");
            tableMapping.ColumnMappings.Add("CreatedById", "CreatedById");
            tableMapping.ColumnMappings.Add("LastModifiedDate", "LastModifiedDate");
            tableMapping.ColumnMappings.Add("LastModifiedById", "LastModifiedById");
            tableMapping.ColumnMappings.Add("SystemModstamp", "SystemModstamp");
            tableMapping.ColumnMappings.Add("IsArchived", "IsArchived");
            tableMapping.ColumnMappings.Add("RecurrenceActivityId", "RecurrenceActivityId");
            tableMapping.ColumnMappings.Add("IsRecurrence", "IsRecurrence");
            tableMapping.ColumnMappings.Add("RecurrenceStartDateTime", "RecurrenceStartDateTime");
            tableMapping.ColumnMappings.Add("RecurrenceEndDateOnly", "RecurrenceEndDateOnly");
            tableMapping.ColumnMappings.Add("RecurrenceTimeZoneSidKey", "RecurrenceTimeZoneSidKey");
            tableMapping.ColumnMappings.Add("RecurrenceType", "RecurrenceType");
            tableMapping.ColumnMappings.Add("RecurrenceInterval", "RecurrenceInterval");
            tableMapping.ColumnMappings.Add("RecurrenceDayOfWeekMask", "RecurrenceDayOfWeekMask");
            tableMapping.ColumnMappings.Add("RecurrenceDayOfMonth", "RecurrenceDayOfMonth");
            tableMapping.ColumnMappings.Add("RecurrenceInstance", "RecurrenceInstance");
            tableMapping.ColumnMappings.Add("RecurrenceMonthOfYear", "RecurrenceMonthOfYear");
            tableMapping.ColumnMappings.Add("ReminderDateTime", "ReminderDateTime");
            tableMapping.ColumnMappings.Add("IsReminderSet", "IsReminderSet");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.CData.Salesforce.SalesforceCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [CData].[Salesforce].[Event] WHERE (([Id] = @Original_Id))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            global::System.Data.CData.Salesforce.SalesforceParameter param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@Original_Id";
            param.SourceColumn = "Id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.DeleteCommand.Parameters.Add(param);
            this._adapter.InsertCommand = new global::System.Data.CData.Salesforce.SalesforceCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [CData].[Salesforce].[Event] ([WhoId], [WhatId], [Subject], [Location], [IsAllDayEvent], [ActivityDateTime], [ActivityDate], [DurationInMinutes], [StartDateTime], [EndDateTime], [Description], [OwnerId], [IsPrivate], [ShowAs], [IsRecurrence], [RecurrenceStartDateTime], [RecurrenceEndDateOnly], [RecurrenceTimeZoneSidKey], [RecurrenceType], [RecurrenceInterval], [RecurrenceDayOfWeekMask], [RecurrenceDayOfMonth], [RecurrenceInstance], [RecurrenceMonthOfYear], [ReminderDateTime], [IsReminderSet]) VALUES (@WhoId, @WhatId, @Subject, @Location, @IsAllDayEvent, @ActivityDateTime, @ActivityDate, @DurationInMinutes, @StartDateTime, @EndDateTime, @Description, @OwnerId, @IsPrivate, @ShowAs, @IsRecurrence, @RecurrenceStartDateTime, @RecurrenceEndDateOnly, @RecurrenceTimeZoneSidKey, @RecurrenceType, @RecurrenceInterval, @RecurrenceDayOfWeekMask, @RecurrenceDayOfMonth, @RecurrenceInstance, @RecurrenceMonthOfYear, @ReminderDateTime, @IsReminderSet)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@WhoId";
            param.SourceColumn = "WhoId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@WhatId";
            param.SourceColumn = "WhatId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@Subject";
            param.SourceColumn = "Subject";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@Location";
            param.SourceColumn = "Location";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@IsAllDayEvent";
            param.SourceColumn = "IsAllDayEvent";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@ActivityDateTime";
            param.SourceColumn = "ActivityDateTime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@ActivityDate";
            param.SourceColumn = "ActivityDate";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@DurationInMinutes";
            param.SourceColumn = "DurationInMinutes";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@StartDateTime";
            param.SourceColumn = "StartDateTime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@EndDateTime";
            param.SourceColumn = "EndDateTime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@Description";
            param.SourceColumn = "Description";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@OwnerId";
            param.SourceColumn = "OwnerId";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@IsPrivate";
            param.SourceColumn = "IsPrivate";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@ShowAs";
            param.SourceColumn = "ShowAs";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@IsRecurrence";
            param.SourceColumn = "IsRecurrence";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@RecurrenceStartDateTime";
            param.SourceColumn = "RecurrenceStartDateTime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@RecurrenceEndDateOnly";
            param.SourceColumn = "RecurrenceEndDateOnly";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@RecurrenceTimeZoneSidKey";
            param.SourceColumn = "RecurrenceTimeZoneSidKey";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@RecurrenceType";
            param.SourceColumn = "RecurrenceType";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@RecurrenceInterval";
            param.SourceColumn = "RecurrenceInterval";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@RecurrenceDayOfWeekMask";
            param.SourceColumn = "RecurrenceDayOfWeekMask";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@RecurrenceDayOfMonth";
            param.SourceColumn = "RecurrenceDayOfMonth";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@RecurrenceInstance";
            param.SourceColumn = "RecurrenceInstance";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@RecurrenceMonthOfYear";
            param.SourceColumn = "RecurrenceMonthOfYear";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@ReminderDateTime";
            param.SourceColumn = "ReminderDateTime";
            this._adapter.InsertCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@IsReminderSet";
            param.SourceColumn = "IsReminderSet";
            this._adapter.InsertCommand.Parameters.Add(param);
            this._adapter.UpdateCommand = new global::System.Data.CData.Salesforce.SalesforceCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [CData].[Salesforce].[Event] SET [WhoId] = @WhoId, [WhatId] = @WhatId, [Subject] = @Subject, [Location] = @Location, [IsAllDayEvent] = @IsAllDayEvent, [ActivityDateTime] = @ActivityDateTime, [ActivityDate] = @ActivityDate, [DurationInMinutes] = @DurationInMinutes, [StartDateTime] = @StartDateTime, [EndDateTime] = @EndDateTime, [Description] = @Description, [OwnerId] = @OwnerId, [IsPrivate] = @IsPrivate, [ShowAs] = @ShowAs, [IsRecurrence] = @IsRecurrence, [RecurrenceStartDateTime] = @RecurrenceStartDateTime, [RecurrenceEndDateOnly] = @RecurrenceEndDateOnly, [RecurrenceTimeZoneSidKey] = @RecurrenceTimeZoneSidKey, [RecurrenceType] = @RecurrenceType, [RecurrenceInterval] = @RecurrenceInterval, [RecurrenceDayOfWeekMask] = @RecurrenceDayOfWeekMask, [RecurrenceDayOfMonth] = @RecurrenceDayOfMonth, [RecurrenceInstance] = @RecurrenceInstance, [RecurrenceMonthOfYear] = @RecurrenceMonthOfYear, [ReminderDateTime] = @ReminderDateTime, [IsReminderSet] = @IsReminderSet WHERE (([Id] = @Original_Id))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@WhoId";
            param.SourceColumn = "WhoId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@WhatId";
            param.SourceColumn = "WhatId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@Subject";
            param.SourceColumn = "Subject";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@Location";
            param.SourceColumn = "Location";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@IsAllDayEvent";
            param.SourceColumn = "IsAllDayEvent";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@ActivityDateTime";
            param.SourceColumn = "ActivityDateTime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@ActivityDate";
            param.SourceColumn = "ActivityDate";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@DurationInMinutes";
            param.SourceColumn = "DurationInMinutes";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@StartDateTime";
            param.SourceColumn = "StartDateTime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@EndDateTime";
            param.SourceColumn = "EndDateTime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@Description";
            param.SourceColumn = "Description";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@OwnerId";
            param.SourceColumn = "OwnerId";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@IsPrivate";
            param.SourceColumn = "IsPrivate";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@ShowAs";
            param.SourceColumn = "ShowAs";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@IsRecurrence";
            param.SourceColumn = "IsRecurrence";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@RecurrenceStartDateTime";
            param.SourceColumn = "RecurrenceStartDateTime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@RecurrenceEndDateOnly";
            param.SourceColumn = "RecurrenceEndDateOnly";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@RecurrenceTimeZoneSidKey";
            param.SourceColumn = "RecurrenceTimeZoneSidKey";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@RecurrenceType";
            param.SourceColumn = "RecurrenceType";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@RecurrenceInterval";
            param.SourceColumn = "RecurrenceInterval";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@RecurrenceDayOfWeekMask";
            param.SourceColumn = "RecurrenceDayOfWeekMask";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@RecurrenceDayOfMonth";
            param.SourceColumn = "RecurrenceDayOfMonth";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@RecurrenceInstance";
            param.SourceColumn = "RecurrenceInstance";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@RecurrenceMonthOfYear";
            param.SourceColumn = "RecurrenceMonthOfYear";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@ReminderDateTime";
            param.SourceColumn = "ReminderDateTime";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@IsReminderSet";
            param.SourceColumn = "IsReminderSet";
            this._adapter.UpdateCommand.Parameters.Add(param);
            param = new global::System.Data.CData.Salesforce.SalesforceParameter();
            param.ParameterName = "@Original_Id";
            param.SourceColumn = "Id";
            param.SourceVersion = global::System.Data.DataRowVersion.Original;
            this._adapter.UpdateCommand.Parameters.Add(param);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.CData.Salesforce.SalesforceConnection();
            this._connection.ConnectionString = global::Salesforce2SharePoint.Properties.Settings.Default.ConnectionStringSalesforce;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.CData.Salesforce.SalesforceCommand[1];
            this._commandCollection[0] = new global::System.Data.CData.Salesforce.SalesforceCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT [Id], [WhoId], [WhatId], [Subject], [Location], [IsAllDayEvent], [ActivityDateTime], [ActivityDate], [DurationInMinutes], [StartDateTime], [EndDateTime], [Description], [AccountId], [OwnerId], [IsPrivate], [ShowAs], [IsDeleted], [IsChild], [IsGroupEvent], [GroupEventType], [CreatedDate], [CreatedById], [LastModifiedDate], [LastModifiedById], [SystemModstamp], [IsArchived], [RecurrenceActivityId], [IsRecurrence], [RecurrenceStartDateTime], [RecurrenceEndDateOnly], [RecurrenceTimeZoneSidKey], [RecurrenceType], [RecurrenceInterval], [RecurrenceDayOfWeekMask], [RecurrenceDayOfMonth], [RecurrenceInstance], [RecurrenceMonthOfYear], [ReminderDateTime], [IsReminderSet] FROM [Event]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SalesforceDataSet.EventDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SalesforceDataSet.EventDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SalesforceDataSet.EventDataTable dataTable = new SalesforceDataSet.EventDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SalesforceDataSet.EventDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(SalesforceDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Event");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(object Original_Id) {
            if ((Original_Id == null)) {
                throw new global::System.ArgumentNullException("Original_Id");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(Original_Id));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    object WhoId, 
                    object WhatId, 
                    object Subject, 
                    object Location, 
                    object IsAllDayEvent, 
                    object ActivityDateTime, 
                    object ActivityDate, 
                    object DurationInMinutes, 
                    object StartDateTime, 
                    object EndDateTime, 
                    object Description, 
                    object OwnerId, 
                    object IsPrivate, 
                    object ShowAs, 
                    object IsRecurrence, 
                    object RecurrenceStartDateTime, 
                    object RecurrenceEndDateOnly, 
                    object RecurrenceTimeZoneSidKey, 
                    object RecurrenceType, 
                    object RecurrenceInterval, 
                    object RecurrenceDayOfWeekMask, 
                    object RecurrenceDayOfMonth, 
                    object RecurrenceInstance, 
                    object RecurrenceMonthOfYear, 
                    object ReminderDateTime, 
                    object IsReminderSet) {
            if ((WhoId == null)) {
                throw new global::System.ArgumentNullException("WhoId");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((object)(WhoId));
            }
            if ((WhatId == null)) {
                throw new global::System.ArgumentNullException("WhatId");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((object)(WhatId));
            }
            if ((Subject == null)) {
                throw new global::System.ArgumentNullException("Subject");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((object)(Subject));
            }
            if ((Location == null)) {
                throw new global::System.ArgumentNullException("Location");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((object)(Location));
            }
            if ((IsAllDayEvent == null)) {
                throw new global::System.ArgumentNullException("IsAllDayEvent");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((object)(IsAllDayEvent));
            }
            if ((ActivityDateTime == null)) {
                throw new global::System.ArgumentNullException("ActivityDateTime");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((object)(ActivityDateTime));
            }
            if ((ActivityDate == null)) {
                throw new global::System.ArgumentNullException("ActivityDate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((object)(ActivityDate));
            }
            if ((DurationInMinutes == null)) {
                throw new global::System.ArgumentNullException("DurationInMinutes");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((object)(DurationInMinutes));
            }
            if ((StartDateTime == null)) {
                throw new global::System.ArgumentNullException("StartDateTime");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((object)(StartDateTime));
            }
            if ((EndDateTime == null)) {
                throw new global::System.ArgumentNullException("EndDateTime");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((object)(EndDateTime));
            }
            if ((Description == null)) {
                throw new global::System.ArgumentNullException("Description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((object)(Description));
            }
            if ((OwnerId == null)) {
                throw new global::System.ArgumentNullException("OwnerId");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((object)(OwnerId));
            }
            if ((IsPrivate == null)) {
                throw new global::System.ArgumentNullException("IsPrivate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((object)(IsPrivate));
            }
            if ((ShowAs == null)) {
                throw new global::System.ArgumentNullException("ShowAs");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((object)(ShowAs));
            }
            if ((IsRecurrence == null)) {
                throw new global::System.ArgumentNullException("IsRecurrence");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((object)(IsRecurrence));
            }
            if ((RecurrenceStartDateTime == null)) {
                throw new global::System.ArgumentNullException("RecurrenceStartDateTime");
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((object)(RecurrenceStartDateTime));
            }
            if ((RecurrenceEndDateOnly == null)) {
                throw new global::System.ArgumentNullException("RecurrenceEndDateOnly");
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((object)(RecurrenceEndDateOnly));
            }
            if ((RecurrenceTimeZoneSidKey == null)) {
                throw new global::System.ArgumentNullException("RecurrenceTimeZoneSidKey");
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((object)(RecurrenceTimeZoneSidKey));
            }
            if ((RecurrenceType == null)) {
                throw new global::System.ArgumentNullException("RecurrenceType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((object)(RecurrenceType));
            }
            if ((RecurrenceInterval == null)) {
                throw new global::System.ArgumentNullException("RecurrenceInterval");
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((object)(RecurrenceInterval));
            }
            if ((RecurrenceDayOfWeekMask == null)) {
                throw new global::System.ArgumentNullException("RecurrenceDayOfWeekMask");
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((object)(RecurrenceDayOfWeekMask));
            }
            if ((RecurrenceDayOfMonth == null)) {
                throw new global::System.ArgumentNullException("RecurrenceDayOfMonth");
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((object)(RecurrenceDayOfMonth));
            }
            if ((RecurrenceInstance == null)) {
                throw new global::System.ArgumentNullException("RecurrenceInstance");
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((object)(RecurrenceInstance));
            }
            if ((RecurrenceMonthOfYear == null)) {
                throw new global::System.ArgumentNullException("RecurrenceMonthOfYear");
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((object)(RecurrenceMonthOfYear));
            }
            if ((ReminderDateTime == null)) {
                throw new global::System.ArgumentNullException("ReminderDateTime");
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((object)(ReminderDateTime));
            }
            if ((IsReminderSet == null)) {
                throw new global::System.ArgumentNullException("IsReminderSet");
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = ((object)(IsReminderSet));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    object WhoId, 
                    object WhatId, 
                    object Subject, 
                    object Location, 
                    object IsAllDayEvent, 
                    object ActivityDateTime, 
                    object ActivityDate, 
                    object DurationInMinutes, 
                    object StartDateTime, 
                    object EndDateTime, 
                    object Description, 
                    object OwnerId, 
                    object IsPrivate, 
                    object ShowAs, 
                    object IsRecurrence, 
                    object RecurrenceStartDateTime, 
                    object RecurrenceEndDateOnly, 
                    object RecurrenceTimeZoneSidKey, 
                    object RecurrenceType, 
                    object RecurrenceInterval, 
                    object RecurrenceDayOfWeekMask, 
                    object RecurrenceDayOfMonth, 
                    object RecurrenceInstance, 
                    object RecurrenceMonthOfYear, 
                    object ReminderDateTime, 
                    object IsReminderSet, 
                    object Original_Id) {
            if ((WhoId == null)) {
                throw new global::System.ArgumentNullException("WhoId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((object)(WhoId));
            }
            if ((WhatId == null)) {
                throw new global::System.ArgumentNullException("WhatId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((object)(WhatId));
            }
            if ((Subject == null)) {
                throw new global::System.ArgumentNullException("Subject");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((object)(Subject));
            }
            if ((Location == null)) {
                throw new global::System.ArgumentNullException("Location");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((object)(Location));
            }
            if ((IsAllDayEvent == null)) {
                throw new global::System.ArgumentNullException("IsAllDayEvent");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(IsAllDayEvent));
            }
            if ((ActivityDateTime == null)) {
                throw new global::System.ArgumentNullException("ActivityDateTime");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(ActivityDateTime));
            }
            if ((ActivityDate == null)) {
                throw new global::System.ArgumentNullException("ActivityDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(ActivityDate));
            }
            if ((DurationInMinutes == null)) {
                throw new global::System.ArgumentNullException("DurationInMinutes");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(DurationInMinutes));
            }
            if ((StartDateTime == null)) {
                throw new global::System.ArgumentNullException("StartDateTime");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(StartDateTime));
            }
            if ((EndDateTime == null)) {
                throw new global::System.ArgumentNullException("EndDateTime");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(EndDateTime));
            }
            if ((Description == null)) {
                throw new global::System.ArgumentNullException("Description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(Description));
            }
            if ((OwnerId == null)) {
                throw new global::System.ArgumentNullException("OwnerId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(OwnerId));
            }
            if ((IsPrivate == null)) {
                throw new global::System.ArgumentNullException("IsPrivate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(IsPrivate));
            }
            if ((ShowAs == null)) {
                throw new global::System.ArgumentNullException("ShowAs");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(ShowAs));
            }
            if ((IsRecurrence == null)) {
                throw new global::System.ArgumentNullException("IsRecurrence");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(IsRecurrence));
            }
            if ((RecurrenceStartDateTime == null)) {
                throw new global::System.ArgumentNullException("RecurrenceStartDateTime");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(RecurrenceStartDateTime));
            }
            if ((RecurrenceEndDateOnly == null)) {
                throw new global::System.ArgumentNullException("RecurrenceEndDateOnly");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(RecurrenceEndDateOnly));
            }
            if ((RecurrenceTimeZoneSidKey == null)) {
                throw new global::System.ArgumentNullException("RecurrenceTimeZoneSidKey");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(RecurrenceTimeZoneSidKey));
            }
            if ((RecurrenceType == null)) {
                throw new global::System.ArgumentNullException("RecurrenceType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(RecurrenceType));
            }
            if ((RecurrenceInterval == null)) {
                throw new global::System.ArgumentNullException("RecurrenceInterval");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(RecurrenceInterval));
            }
            if ((RecurrenceDayOfWeekMask == null)) {
                throw new global::System.ArgumentNullException("RecurrenceDayOfWeekMask");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(RecurrenceDayOfWeekMask));
            }
            if ((RecurrenceDayOfMonth == null)) {
                throw new global::System.ArgumentNullException("RecurrenceDayOfMonth");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(RecurrenceDayOfMonth));
            }
            if ((RecurrenceInstance == null)) {
                throw new global::System.ArgumentNullException("RecurrenceInstance");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(RecurrenceInstance));
            }
            if ((RecurrenceMonthOfYear == null)) {
                throw new global::System.ArgumentNullException("RecurrenceMonthOfYear");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(RecurrenceMonthOfYear));
            }
            if ((ReminderDateTime == null)) {
                throw new global::System.ArgumentNullException("ReminderDateTime");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(ReminderDateTime));
            }
            if ((IsReminderSet == null)) {
                throw new global::System.ArgumentNullException("IsReminderSet");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(IsReminderSet));
            }
            if ((Original_Id == null)) {
                throw new global::System.ArgumentNullException("Original_Id");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(Original_Id));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private EventTableAdapter _eventTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public EventTableAdapter EventTableAdapter {
            get {
                return this._eventTableAdapter;
            }
            set {
                this._eventTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._eventTableAdapter != null) 
                            && (this._eventTableAdapter.Connection != null))) {
                    return this._eventTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._eventTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(SalesforceDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._eventTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Event.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._eventTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(SalesforceDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._eventTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Event.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._eventTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(SalesforceDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._eventTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Event.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._eventTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(SalesforceDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._eventTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._eventTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("TableAdapterManager で管理されるすべての TableAdapter は同一の接続文字列を使用する必要があります。");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager には接続情報がありません。それぞれの TableAdapterManager TableAdapter プロパティを有効な" +
                        " TableAdapter インスタンスに設定してください。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("トランザクションを開始できません。現在のデータ接続がトランザクションをサポートしていないか、または現在の状態がトランザクションの開始を許可していません。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._eventTableAdapter != null)) {
                    revertConnections.Add(this._eventTableAdapter, this._eventTableAdapter.Connection);
                    this._eventTableAdapter.Connection = ((global::System.Data.CData.Salesforce.SalesforceConnection)(workConnection));
                    this._eventTableAdapter.Transaction = ((global::System.Data.CData.Salesforce.SalesforceTransaction)(workTransaction));
                    if (this._eventTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._eventTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._eventTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._eventTableAdapter != null)) {
                    this._eventTableAdapter.Connection = ((global::System.Data.CData.Salesforce.SalesforceConnection)(revertConnections[this._eventTableAdapter]));
                    this._eventTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591